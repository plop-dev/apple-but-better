---
import '@/styles/globals.css';

import { Button, buttonVariants } from '@/components/ui/button';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/components/ui/carousel';

import ButtonLink from '@/components/ui/ButtonLink.astro';
import Logo from '@/components/Logo.astro';
import Highlights from '@/components/Highlights/Highlights.astro';

import { Image } from 'astro:assets';
---

<!doctype html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='description' content='Astro description' />
		<meta name='viewport' content='width=device-width' />
		<meta name='robots' content='noindex, nofollow' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<meta name='generator' content={Astro.generator} />
		<title>iPhone 15 Pro - Apple+</title>
	</head>
	<body>
		<nav class='border-b border-border/20 bg-background/65'>
			<div class='nav-ctn'>
				<div class='nav-start'>
					<div class='nav-start-wr'>
						<Logo />
					</div>
				</div>
				<div class='nav-middle'>
					<div class='nav-middle-wr'>
						<div class='nav-item-wr'>
							<ButtonLink variant={'ghost'} href='/'>Your crippling bank account</ButtonLink>
						</div>
						<div class='nav-item-wr'>
							<ButtonLink variant={'ghost'} href='/'>iPhone 15 Pro</ButtonLink>
						</div>
						<div class='nav-item-wr'>
							<ButtonLink variant={'ghost'} href='/'>iCloud</ButtonLink>
						</div>
					</div>
				</div>
				<div class='nav-end'>
					<div class='nav-end-wr'>
						<ButtonLink variant={'ghost'} href='https://www.apple.com/uk/shop/buy-iphone/iphone-15-pro'>Buy Now</ButtonLink>
					</div>
				</div>
			</div>
		</nav>
		<main>
			<div class='front h-screen'>
				<div class='bg'></div>
				<div class='title mt-[5vh] flex flex-col text-center'>
					<h5 class='opacity-80'>The new iPhone 15 Pro</h5>
					<h1 class=''>Titanium. Meh.</h1>
					<div class='price z-10'>
						<ButtonLink variant={'secondary'} href='https://www.apple.com/uk/shop/buy-iphone/iphone-15-pro'>Buy</ButtonLink>
						<h5 class='font-light'>Literally only half your salary</h5>
					</div>
				</div>
			</div>

			<Highlights />
		</main>
	</body>
</html>

<script>
	import gsap from 'gsap';
	import { ScrollTrigger } from 'gsap/ScrollTrigger';
	import * as THREE from 'three';
	import WebGL from 'three/addons/capabilities/WebGL.js';
	import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
	import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';

	gsap.registerPlugin(ScrollTrigger);
	const scene = new THREE.Scene();
	const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);

	const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
	renderer.setClearColor(0x000000, 0);
	renderer.setSize(window.innerWidth, window.innerHeight);
	const ca = document.body.appendChild(renderer.domElement);
	ca.setAttribute('data-id', 'hero');

	const loader = new GLTFLoader();
	// const controls = new OrbitControls(camera, renderer.domElement);

	loader.load(
		'/models/iphone.glb',
		function (gltf) {
			const gltfScene = gltf.scene;
			gltf.scene.position.y -= 0.01;

			window.addEventListener('mousemove', event => {
				const xPos = event.clientX / innerWidth - 0.5;
				const yPos = event.clientY / innerHeight - 0.5;

				gsap.to(gltfScene.rotation, {
					y: xPos * 1,
					x: -yPos * 0.5,
					ease: 'power4.out',
				});
			});

			const maxAnisotropy = renderer.capabilities.getMaxAnisotropy();
			gltfScene.traverse((object: any) => {
				if (object.isMesh === true && object.material.map !== null) {
					object.material.map.anisotropy = maxAnisotropy;
				}
			});

			scene.add(gltfScene);
		},
		() => {
			null;
		},
		function (error) {
			console.error(error);
		},
	);

	const light = new THREE.PointLight(); // soft white light
	light.intensity = 15;
	light.position.set(0.5, 0.5, 0);
	// const lightH = new THREE.PointLightHelper(light);
	scene.add(light);

	camera.position.set(0, 0, -0.2);
	camera.lookAt(0, 0, 0);

	// const hlp = new THREE.AxesHelper(1);
	// scene.add(hlp);

	window.addEventListener('resize', event => {
		camera.aspect = innerWidth / innerHeight;
		camera.updateProjectionMatrix();
		renderer.setSize(innerWidth, innerHeight);
	});
	function animate() {
		renderer.render(scene, camera);
		// controls.update();
	}

	if (WebGL.isWebGLAvailable()) {
		renderer.setAnimationLoop(animate);
	} else {
		const warning = WebGL.getWebGLErrorMessage();
		document.getElementById('container')?.appendChild(warning);
	}
</script>

<style lang='scss' is:global>
	* {
		padding: 0;
		margin: 0;
	}

	body {
		overflow-x: hidden;
	}

	nav {
		top: 0;
		position: sticky;
		height: 50px;
		display: flex;
		flex-direction: row;
		justify-content: center;
		backdrop-filter: blur(6px);
		width: 100%;
		z-index: 100;

		.nav-ctn {
			display: flex;
			flex-direction: row;
			flex-wrap: wrap;
			width: 100%;
			height: 100%;
			align-content: center;
			justify-content: space-between;
			padding: 0 1rem;
			gap: 8rem;

			.nav-start,
			.nav-start ~ * {
				display: flex;
				align-items: center;
				justify-content: space-around;
			}

			.nav-start,
			.nav-end {
				width: 100px;
				justify-content: left;
			}
			.nav-end {
				justify-content: right;
			}

			.nav-middle-wr {
				display: flex;
				flex-direction: row;
			}

			.nav-item-wr {
				display: flex;
				justify-content: center;
				align-items: center;
				min-width: 200px;
				max-width: 200px;
			}
		}
	}

	main {
		width: 100%;
		height: 100%;

		.front {
			.bg {
				position: absolute;
				background: var(--radialPrimarySecondary);
				opacity: 0.3;
				width: 100vw;
				height: 100vh;
				top: 0;
				left: 0;
			}

			.price {
				margin-top: 60vh;
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				gap: 1.5rem;
			}
		}
	}

	canvas[data-id='hero'] {
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		position: absolute;
		z-index: -1;
	}
</style>
